plugins {
    alias libs.plugins.loom
    id "maven-publish"
    id "signing"
    alias libs.plugins.kotlin
    alias libs.plugins.kotlin.serialization
    alias libs.plugins.nexus.publish
    alias libs.plugins.loom.quiltflower
}
// After publishing, the artifact must be closed and then released at https://oss.sonatype.org/#stagingRepositories
def total_version = "${libs.versions.mod.version.get()}+${libs.versions.minecraft.get()}"

archivesBaseName = project.archives_base_name
version = total_version
group = project.maven_group

loom {
    accessWidenerPath = file("src/main/resources/fabricdrawer.accessWidener")
}


java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
    withSourcesJar()
    withJavadocJar()
}

kotlin {
    explicitApi()
}


dependencies {
    //to change the versions see the gradle.properties file
    minecraft libs.minecraft
    mappings "net.fabricmc:yarn:${libs.versions.yarn.mappings.get()}:v2"
    modImplementation libs.fabric.loader
    modImplementation libs.flk
    modImplementation libs.fabric.api
    testImplementation libs.kotlin.test
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}


test {
    useJUnitPlatform()
}



def getSecretProperty(String path, String key) {
    def rootPath = System.getenv("SECRETS_PATH")
    def file = new File("${rootPath}/${path}.properties")
    if (!file.exists()) return ""
    def properties = new Properties()
    new FileInputStream(file).withCloseable { is -> properties.load(is) }
    return properties[key]
}

def getSecretFile(String path) {
    def rootPath = System.getenv("SECRETS_PATH")
    def file = new File("$rootPath/$path.properties")
    if (!file.exists()) return ""
    return new String(file.readBytes())
}

//TODO: figure out how to publish update with one command https://github.com/gradle-nexus/publish-plugin
//afterEvaluate {
//    task uploadDrawer {
//        group = "drawer"
//        dependsOn tasks.publishToSonatype, tasks.closeAndReleaseSonatypeStagingRepository
//    }
//}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                // The coordinates of the library, being set from variables that
                // we'll set up later
                groupId maven_group
                artifactId archives_base_name
                version total_version

                //TODO: test this new setup works properly (i replaced artifact(remapJar) and stuff)
                from components.java

                // Mostly self-explanatory metadata
                pom {
                    name = archives_base_name
                    description = 'Fabric mod that adds NBT and PacketByteBuf to kotlinx.serialization'
                    url = github_url
                    licenses {
                        license {
                            name = license
                        }
                    }
                    developers {
                        developer {
                            id = "fudge"
                            name = "natan"
                            email = "natandestroyer100@gmail.com"
                        }
                    }

                    scm {
                        url = github_url
                    }
                }
            }
        }
    }
}
nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = getSecretProperty('fabric-drawer/keys', "sonatype_staging_profile_id")
            username = getSecretProperty("sonatype", "ossrh_username")
            password = getSecretProperty("sonatype", "ossrh_password")
        }
    }
}
signing {
    useInMemoryPgpKeys(
            getSecretProperty("fabric-drawer/keys", "gpg_key_id"),
            getSecretFile("fabric-drawer/secret_key.txt"),
            getSecretProperty("fabric-drawer/keys", "gpg_key_password"),
    )
    sign publishing.publications
}